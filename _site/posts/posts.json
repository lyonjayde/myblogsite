[
  {
    "path": "posts/2021-04-20-moving-along-with-r/",
    "title": "Moving along with R",
    "description": "As I've progressed further with learning R and R Studio, I now am quite confident in my abilities.",
    "author": [
      {
        "name": "Jayde Lyon",
        "url": "https://www.google.com"
      }
    ],
    "date": "2021-04-20",
    "categories": [
      "R",
      "Class work"
    ],
    "contents": "\nFunctions\nCreate a function that will return the sum of 2 numbers.\n\n\nsum_of_2 <- function(number1, number2){\n  \n  result <- number1+number2\n    \n    return(result)\n}\n\n\n\nCreate a function that will return the mean of a vector of numbers fed to it.\nA sample vector of values is provide here to help.\n\n\nmynumbers <- sample(1:100, 10)\n\nmean_of_vec <- function(numbers){\n  \n  result <- mean(numbers)\n    \n    return(result)\n}\n\nmean_of_vec(mynumbers)\n\n\n[1] 46.9\n\nNow, expand on the function you made above, and instead of just returning the number, have it return the sentence:\n\"The mean is ___\" where the blank is the calculated result.\n\n\nmean_of_vec <- function(numbers){\n  \n  result <- paste0(\"The mean is \", mean(numbers))\n    \n    return(result)\n}\n\nmean_of_vec(mynumbers)\n\n\n[1] \"The mean is 46.9\"\n\n\n\n#load the data to use for the rest of the assignment questions\nflights <- nycflights13::flights\n\n\n\nUsing the flights dataset from the package nycflights13 loaded in the above cell, create a function that filters the data frame to only include records from a single originating airport (column name origin).\n\n\norigin_flight <- function(airport){\n  \n  result <- flights %>% \n            filter(origin == airport)\n    \n    return(result)\n}\n\norigin_flight('JFK')\n\n\n# A tibble: 111,279 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     1     1      542            540         2      923\n 2  2013     1     1      544            545        -1     1004\n 3  2013     1     1      557            600        -3      838\n 4  2013     1     1      558            600        -2      849\n 5  2013     1     1      558            600        -2      853\n 6  2013     1     1      558            600        -2      924\n 7  2013     1     1      559            559         0      702\n 8  2013     1     1      606            610        -4      837\n 9  2013     1     1      611            600        11      945\n10  2013     1     1      613            610         3      925\n# … with 111,269 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nSimilarly, using the flights dataset, create a function that:\nfilters the data frame to only include records from a single originating airport (column name origin), and then\naggregates the results by airline (carrier) to show how many flights each airline has from that airport.\n\n\norigin_airline <- function(airport){\n  \n  result <- flights %>% \n            filter(origin == airport) %>% \n            count(carrier)\n    \n    return(result)\n}\n\norigin_airline('JFK')\n\n\n# A tibble: 10 x 2\n   carrier     n\n * <chr>   <int>\n 1 9E      14651\n 2 AA      13783\n 3 B6      42076\n 4 DL      20701\n 5 EV       1408\n 6 HA        342\n 7 MQ       7193\n 8 UA       4534\n 9 US       2995\n10 VX       3596\n\nSimilarly, using the flights dataset, create a function that:\nfilters the data frame to only include records from a single originating airport (column name origin), and then\nfilter to only include flights longer than a specific number of minutes (air_time), and then\naggregates the results by airline (carrier) to show how many flights of that length each airline has from that airport.\n\n\norigin_airtime <- function(airport, minutes){\n  \n  result <- flights %>% \n            filter(origin == airport) %>% \n            filter(air_time >= minutes) %>% \n            count(air_time)\n    \n    return(result)\n}\n\norigin_airtime('JFK', 100)\n\n\n# A tibble: 401 x 2\n   air_time     n\n *    <dbl> <int>\n 1      100   198\n 2      101   208\n 3      102   233\n 4      103   240\n 5      104   231\n 6      105   210\n 7      106   228\n 8      107   241\n 9      108   268\n10      109   287\n# … with 391 more rows\n\nPlotly charts\nUsing the flights dataset, use plotly to create a bar chart showing the breakdown of flights by airline that originate from JFK airport (origin) and are more than 400 minutes in length (air_time).\n\n\n#data prep\n\nJFK_origin <- flights %>% \n  filter(origin == 'JFK') %>% \n  filter(air_time >= 400) %>% \n  count(carrier)\n\n\n\n\n\nJFK_flights <- plot_ly(data= JFK_origin, x = ~carrier, y = ~n, type = 'bar') %>% \n  layout(title = \"Flights From JFK Over 400 Minutes\",\n         xaxis = list(title = \"Carrier\"),\n         yaxis = list (title = \"Number of Flights\"))\n\nJFK_flights\n\n\n\n{\"x\":{\"visdat\":{\"b5eb582f2534\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"b5eb582f2534\",\"attrs\":{\"b5eb582f2534\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Flights From JFK Over 400 Minutes\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Carrier\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"AA\",\"B6\",\"DL\",\"HA\",\"UA\",\"VX\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Number of Flights\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[\"AA\",\"B6\",\"DL\",\"HA\",\"UA\",\"VX\"],\"y\":[8,3,9,342,4,4],\"type\":\"bar\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nUsing the flights dataset, use plotly to create a bar chart showing which destination airports (dest) have the most flights with durations of over 400 minutes (air_time).\n\n\n# data prep\n\ndest_400 <- flights %>% \n  filter(air_time >= 400) %>% \n  count (dest)\n\n\n\n\n\ndest_flights <- plot_ly(data= dest_400, x = ~dest, y = ~n, type = 'bar') %>% \n  layout(title = \"Destinations of Flights With Over 400 Minute Flights\",\n         xaxis = list(title = \"Destination\"),\n         yaxis = list (title = \"Number of Flights\"))\n\ndest_flights\n\n\n\n{\"x\":{\"visdat\":{\"b5eb19785ca5\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"b5eb19785ca5\",\"attrs\":{\"b5eb19785ca5\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Destinations of Flights With Over 400 Minute Flights\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Destination\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"ANC\",\"BUR\",\"HNL\",\"LAX\",\"SAN\",\"SFO\",\"SNA\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Number of Flights\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[\"ANC\",\"BUR\",\"HNL\",\"LAX\",\"SAN\",\"SFO\",\"SNA\"],\"y\":[7,1,701,5,3,31,1],\"type\":\"bar\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nUsing the flights dataset, use plotly to create a donut chart showing the share of flights each airline has for flights with a destination of Daniel K. Inouye International Airport (HNL) in Honolulu.\n\n\n# data prep\n\nHNL_carrier <- flights %>% \n              filter(dest == 'HNL') %>% \n            count(carrier)\n\n\n\n\n\nHNL_donut <- HNL_carrier %>% plot_ly(labels = ~carrier, values = ~n) %>% \n                add_pie(hole = 0.6) %>% \n                layout(\n                  title = \"Share of Airline Flights to HNL\",  showlegend = F,\n                  xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n                  yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\n\nHNL_donut\n\n\n\n{\"x\":{\"visdat\":{\"b5eb227735d2\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"b5eb227735d2\",\"attrs\":{\"b5eb227735d2\":{\"labels\":{},\"values\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\",\"hole\":0.6,\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Share of Airline Flights to HNL\",\"showlegend\":false,\"xaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"yaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"hovermode\":\"closest\"},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"labels\":[\"HA\",\"UA\"],\"values\":[342,365],\"type\":\"pie\",\"hole\":0.6,\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nUsing the flights dataset, use plotly to create a scatterplot chart for flights with a destination of Daniel K. Inouye International Airport (HNL) in Honolulu, that shows the relationship between the departure delay (dep_delay) and arrival delay (arr_delay).\n\n\n# data prep\n\nHNLdest <- flights %>% \n          filter(dest == 'HNL') \n\n\n\n\n\nplot_ly(data = HNLdest, x = ~dep_delay, y = ~arr_delay,\n        marker = list(size = 10,\n                             color = 'blue',\n                             line = list(color = 'blue',\n                                         width = .5)))\n\n\n\n{\"x\":{\"visdat\":{\"b5eb225e9459\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"b5eb225e9459\",\"attrs\":{\"b5eb225e9459\":{\"x\":{},\"y\":{},\"marker\":{\"size\":10,\"color\":\"blue\",\"line\":{\"color\":\"blue\",\"width\":0.5}},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"dep_delay\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"arr_delay\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[-3,0,9,0,14,37,0,2,-2,-6,79,12,102,-1,1,3,1301,-1,-1,1,-5,38,1,4,-4,1,-1,0,-4,24,-2,18,-1,16,123,3,-6,-3,0,42,-7,-1,-7,46,101,-4,-6,-1,20,254,1,6,-1,102,-4,78,-5,-1,-5,5,-2,8,12,-9,-3,11,-6,7,2,-5,-2,6,-3,2,6,-9,0,-3,-7,-5,-5,19,-13,-1,-10,0,-4,0,0,2,-3,-2,-4,11,-6,3,-6,25,12,-8,-2,-3,-4,-3,4,4,-7,-8,0,-5,-7,-11,-1,4,-9,25,-10,4,-9,0,2,5,-6,-3,-9,-7,0,-12,0,1,-2,-3,5,-3,6,-5,2,84,9,-7,-9,-3,28,-4,-14,-4,-4,-4,-7,6,9,-11,-9,-10,-7,31,-11,21,-1,-10,3,-16,-1,-11,-3,-4,-6,9,-6,-2,2,-10,7,3,3,4,-10,-3,-6,2,-3,5,5,22,-2,3,44,0,0,3,-1,7,-5,290,3,82,-1,20,3,213,-2,218,-6,61,-4,84,-3,118,-5,60,-7,40,4,24,-6,19,-3,14,-8,8,3,34,-10,24,-7,31,-8,5,-5,29,-2,41,-3,14,-3,0,0,15,-7,-5,0,-1,-6,19,186,30,-3,-3,1,-1,-2,1,22,-4,-5,-2,-5,-8,-2,4,-5,14,10,-3,-3,-9,-4,-5,-5,-3,-2,206,25,36,-4,-2,-2,60,0,24,-1,24,29,4,-5,25,0,1,4,19,10,-8,-5,-5,-5,-5,17,48,40,-2,27,1,4,-7,1,-3,59,-3,-2,-2,-3,1,7,1,-4,6,2,-1,75,-4,4,-2,-13,19,50,-10,115,0,-5,-3,-6,1,11,-10,1,-3,14,-6,19,-5,5,-2,-6,-9,7,0,12,-2,167,-3,-1,6,3,-6,-4,-3,36,-5,-5,-4,8,-5,12,-2,61,-7,2,-3,13,-5,0,53,0,-12,-7,11,-1,-6,-6,21,-1,5,-7,7,-10,2,4,7,-8,-1,-4,-2,-4,4,3,2,-11,13,-6,-3,-2,29,-5,263,0,-3,-7,3,1,-5,-2,5,0,-2,-4,-6,-1,15,1,7,-3,-2,-7,-3,-6,11,-5,-1,-4,1,-1,1,-9,1,-6,-4,-2,7,-5,0,-1,1,2,0,-4,0,-2,2,-7,-2,-5,41,-8,8,55,-4,-2,-2,-7,0,-7,-5,-12,23,13,-4,-5,0,-4,8,-3,1,-10,24,6,4,44,5,-8,2,-9,6,-12,-4,-5,8,-8,9,-1,-4,113,20,-2,-3,2,11,-5,2,10,11,-8,-4,-3,-6,0,-5,-5,-2,-8,38,-1,-5,-9,44,1,3,-6,7,-3,-5,-5,-8,-7,14,-5,2,5,83,-8,-3,40,-10,65,-10,36,-4,2,88,-3,2,-9,13,-2,7,-9,-2,-3,-4,-2,-2,-6,-1,-7,2,-8,10,-5,40,-7,6,-8,5,0,-4,-5,2,-1,73,-5,97,-2,31,-5,-1,-4,-1,-7,10,-4,-8,-3,-2,5,-4,2,-8,93,-4,1,3,20,-8,138,3,4,-2,0,-3,11,-10,-2,5,-2,-1,-3,-10,-3,-7,-1,-4,0,-6,-1,-3,9,-4,-2,-1,-1,29,7,-9,6,-10,-2,11,4,-7,-2,-7,-2,-7,5,134,1,-6,4,0,0,-3,88,-5,5,-6,5,-2,-2,-7,-5,-4,2,-5,0,-15,-2,-10,-6,-5,4,-7,4,-1,18,-2,-4,-15,5,-5,-3,1,-7,15,-5,-2,2,3,-3,-4,1,-7,3,-4,-4,1,-6,5,-8,4,-5,24,-3,1,-1,-9,-6,-5,-2,-3,51,-1,6],\"y\":[-14,21,-5,-4,-26,31,-14,-3,-11,-45,28,-14,50,-10,-26,16,1272,44,-41,0,-48,17,-38,-22,-7,-33,-34,-15,-51,13,-20,42,-17,33,65,-3,-32,-45,-38,62,-31,8,-24,38,82,3,-10,25,9,299,6,6,-26,107,-17,98,-26,-10,-49,-17,-55,-20,7,-12,-25,-10,-12,-17,-32,-26,-35,-3,14,48,-15,-31,-22,-28,-21,-19,-15,-1,-18,-22,0,-8,-23,-7,-31,-11,-1,1,3,-11,-8,-15,-9,4,0,-19,-14,-9,-28,-35,-15,-17,-12,-50,-24,-25,-37,-21,-22,-2,-10,17,7,-3,-18,-18,3,19,2,33,14,16,-1,-5,19,19,9,30,-12,32,60,39,-5,37,-7,-9,-10,-1,27,-10,-8,-6,4,5,22,44,28,13,-3,1,-10,4,-31,-4,-20,-13,-15,-16,-22,-19,-44,-42,-8,-46,-22,-3,-19,-10,-4,0,-16,-10,34,19,10,41,14,7,-15,6,-7,6,125,4,-24,-6,-8,-13,-2,285,-8,41,-21,2,18,177,8,189,-45,31,-27,47,-34,76,-18,4,-31,20,-20,1,-15,-1,-14,-9,-22,1,-15,-7,-22,6,1,28,2,-2,-58,9,-60,-9,-54,1,-19,0,15,54,2,12,-12,6,-39,47,154,-8,-60,-70,-29,-59,-48,-59,5,-37,-24,-64,-36,-60,-34,-56,-40,-19,-9,-43,-11,-30,-11,-31,3,-64,-32,126,-3,-33,-29,-53,-24,-27,-70,-52,-45,-45,-10,-62,-34,-14,-21,-21,18,1,-7,-31,8,-41,-4,-29,30,35,60,-33,-2,-16,-6,-4,-5,-30,76,-27,-11,12,25,21,48,14,37,37,61,1,98,-17,-3,-21,-8,-1,14,-37,129,-1,11,-21,13,-19,1,-43,-12,-30,-1,-44,-4,-58,-24,-28,6,-30,17,-20,19,-13,204,25,0,-8,0,-5,-6,0,-2,-13,-13,-27,-12,-41,-14,-44,113,-44,-36,-26,5,-7,5,38,-8,-12,-27,5,-30,-17,16,-18,-20,0,-22,11,-25,-9,18,32,1,16,-3,-1,-6,5,-31,-30,-56,-24,-52,-24,-35,5,-43,238,-30,-32,-37,-31,-36,-55,-39,-40,-24,-23,-62,-58,-59,-26,25,1,-1,-37,-19,-11,-4,7,-32,-12,-37,-19,-27,-11,-17,2,-35,-7,-12,1,-21,-20,-6,7,3,3,-14,10,-7,8,-4,82,-25,34,-14,-2,21,-18,-40,-14,-13,3,-32,11,-31,23,-24,-10,-10,-11,7,0,-3,-10,-3,-16,-3,-29,6,-38,-41,-33,-43,-1,-19,-7,1,-18,1,-1,21,-4,134,25,10,6,24,8,29,-11,38,6,1,69,10,-8,10,3,-3,-10,-19,6,-9,-13,11,99,-2,0,-14,0,-24,-15,-9,-18,-26,-3,-20,-1,57,34,-28,-20,3,-31,34,-7,9,0,-19,83,-9,-10,-5,11,12,21,-4,2,-12,-1,10,-11,-15,-5,-19,-7,-15,2,-16,24,-9,-4,-21,9,11,-9,18,14,5,62,9,134,5,28,7,28,18,-1,10,0,9,-35,12,22,-2,16,-1,3,66,-8,2,12,2,0,116,11,-11,17,3,14,2,20,-1,23,-2,20,2,-2,-7,4,0,20,6,3,-11,-17,-6,-10,-32,-24,-25,14,-29,-33,-5,-16,-29,13,-5,34,-18,-2,-6,-22,-2,125,5,-27,-13,-21,-25,-2,52,-9,-28,-12,-24,8,-23,-22,-29,-20,-7,-27,-16,-44,-26,-21,-40,-46,-18,-38,-37,-32,-4,-18,-26,-43,-38,-26,-4,-9,-29,-10,-28,-15,-3,-10,7,-5,-4,2,-4,-11,-4,-10,-19,-43,-6,2,-8,1,-3,23,8,-3,3,-33,-63,-40,4,-7,-11],\"marker\":{\"color\":\"blue\",\"size\":10,\"line\":{\"color\":\"blue\",\"width\":0.5}},\"type\":\"scatter\",\"mode\":\"markers\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-20T19:28:51-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-13-my-first-new-post/",
    "title": "My first R assignment",
    "description": "This is my first R assignment, looking at the election results and which members of Congress voted to impeach former President Donald J. Trump.",
    "author": [
      {
        "name": "Jayde Lyon",
        "url": "https://www.google.com"
      }
    ],
    "date": "2021-04-19",
    "categories": [
      "R",
      "Class work"
    ],
    "contents": "\nFOR EACH OF THE QUESTIONS BELOW IN EACH CODE CHUNK, WRITE YOUR WORKING R CODE TO RETURN THE REQUESTED RESULTS\n\n\n# 1) The column \"for_impeachment\" indicates whether the member has publicly called for\n# an impeachment inquiry. Filter to return only the ones where the answer is NO.    \n\nimpeach %>% \n  filter(for_impeachment == 'NO')\n\n\n# A tibble: 26 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 NO              Allred    Colin      <NA>        D     TX   \n 2 NO              Brindisi  Anthony    <NA>        D     NY   \n 3 NO              Bustos    Cheri      <NA>        D     IL   \n 4 NO              Cuellar   Henry      <NA>        D     TX   \n 5 NO              Cunningh… Joe        <NA>        D     SC   \n 6 NO              Davids    Sharice    <NA>        D     KS   \n 7 NO              Gabbard   Tulsi      <NA>        D     HI   \n 8 NO              Golden    Jared      <NA>        D     ME   \n 9 NO              Gonzalez  Vicente    <NA>        D     TX   \n10 NO              Horn      Kendra     <NA>        D     OK   \n# … with 16 more rows, and 26 more variables: district <chr>,\n#   date_exact <date>, date_approx_month <date>, date_comb <date>,\n#   date_month <dbl>, date_year <dbl>, margin_flag_2018 <chr>,\n#   flip_2018 <chr>, house_dist <chr>, keyrace_rating <chr>,\n#   median_income <dbl>, median_income_compared_to_national <chr>,\n#   median_age <dbl>, median_age_compared_to_national <chr>,\n#   pct_nonwhite <dbl>, pct_nonwhite_compared_to_national <chr>,\n#   pct_bachelors <dbl>, pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 2) Filter to return only results where a member is both against impeachment, and comes from a \n# district that President Trump won in 2016 (which is noted in the \"p16winningparty\" column)\n\n\nimpeach %>% \n  filter (for_impeachment == 'NO', p16winningparty == 'R')\n\n\n# A tibble: 15 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 NO              Brindisi  Anthony    <NA>        D     NY   \n 2 NO              Bustos    Cheri      <NA>        D     IL   \n 3 NO              Cunningh… Joe        <NA>        D     SC   \n 4 NO              Golden    Jared      <NA>        D     ME   \n 5 NO              Horn      Kendra     <NA>        D     OK   \n 6 NO              Kind      Ron        <NA>        D     WI   \n 7 NO              Lamb      Conor      <NA>        D     PA   \n 8 NO              Lee       Susie      <NA>        D     NV   \n 9 NO              McAdams   Ben        <NA>        D     UT   \n10 NO              McBath    Lucy       <NA>        D     GA   \n11 NO              O'Haller… Tom        <NA>        D     AZ   \n12 NO              Peterson  Collin     C.          D     MN   \n13 NO              Rose      Max        <NA>        D     NY   \n14 NO              Torres S… Xochitl    <NA>        D     NM   \n15 NO              Van Drew  Jefferson  <NA>        D     NJ   \n# … with 26 more variables: district <chr>, date_exact <date>,\n#   date_approx_month <date>, date_comb <date>, date_month <dbl>,\n#   date_year <dbl>, margin_flag_2018 <chr>, flip_2018 <chr>,\n#   house_dist <chr>, keyrace_rating <chr>, median_income <dbl>,\n#   median_income_compared_to_national <chr>, median_age <dbl>,\n#   median_age_compared_to_national <chr>, pct_nonwhite <dbl>,\n#   pct_nonwhite_compared_to_national <chr>, pct_bachelors <dbl>,\n#   pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 3) Filter for only results where a member is against impeachment, comes from a \n# district that President Trump won in 2016 (which is noted in the \"p16winningparty\" column),\n# and also comes from a district that Mitt Romney won in 2012 (\"p12winningparty\").\n\nimpeach %>% \n  filter (for_impeachment == 'NO', p16winningparty == 'R', p12winningparty == 'R')\n\n\n# A tibble: 9 x 32\n  for_impeachment last_name first_name middle_name party state\n  <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n1 NO              Brindisi  Anthony    <NA>        D     NY   \n2 NO              Cunningh… Joe        <NA>        D     SC   \n3 NO              Horn      Kendra     <NA>        D     OK   \n4 NO              Lamb      Conor      <NA>        D     PA   \n5 NO              McAdams   Ben        <NA>        D     UT   \n6 NO              McBath    Lucy       <NA>        D     GA   \n7 NO              O'Haller… Tom        <NA>        D     AZ   \n8 NO              Peterson  Collin     C.          D     MN   \n9 NO              Torres S… Xochitl    <NA>        D     NM   \n# … with 26 more variables: district <chr>, date_exact <date>,\n#   date_approx_month <date>, date_comb <date>, date_month <dbl>,\n#   date_year <dbl>, margin_flag_2018 <chr>, flip_2018 <chr>,\n#   house_dist <chr>, keyrace_rating <chr>, median_income <dbl>,\n#   median_income_compared_to_national <chr>, median_age <dbl>,\n#   median_age_compared_to_national <chr>, pct_nonwhite <dbl>,\n#   pct_nonwhite_compared_to_national <chr>, pct_bachelors <dbl>,\n#   pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 4) Filter for only results from September 2019 where a member is a YES for impeachment. \n\nimpeach %>% \n  filter(date_month == '9', date_year == '2019', for_impeachment == 'YES')\n\n\n# A tibble: 76 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 YES             Axne      Cynthia    <NA>        D     IA   \n 2 YES             Bass      Karen      <NA>        D     CA   \n 3 YES             Bera      Ami        <NA>        D     CA   \n 4 YES             Bishop    Sanford    D.          D     GA   \n 5 YES             Cartwrig… Matt       <NA>        D     PA   \n 6 YES             Case      Ed         <NA>        D     HI   \n 7 YES             Castor    Kathy      <NA>        D     FL   \n 8 YES             Cisneros  Gilbert    <NA>        D     CA   \n 9 YES             Clyburn   James      E.          D     SC   \n10 YES             Cooper    Jim        <NA>        D     TN   \n# … with 66 more rows, and 26 more variables: district <chr>,\n#   date_exact <date>, date_approx_month <date>, date_comb <date>,\n#   date_month <dbl>, date_year <dbl>, margin_flag_2018 <chr>,\n#   flip_2018 <chr>, house_dist <chr>, keyrace_rating <chr>,\n#   median_income <dbl>, median_income_compared_to_national <chr>,\n#   median_age <dbl>, median_age_compared_to_national <chr>,\n#   pct_nonwhite <dbl>, pct_nonwhite_compared_to_national <chr>,\n#   pct_bachelors <dbl>, pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 4) Filter for only results where a member is a YES for impeachment and is from a district\n# where Clinton won more than 70 percent of the vote in 2016 (found in column \"clinton_percent\")\n\nimpeach %>% \n  filter(clinton_percent >= '70.0', for_impeachment == 'YES')\n\n\n# A tibble: 55 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 YES             Barragan  Nanette    <NA>        D     CA   \n 2 YES             Bass      Karen      <NA>        D     CA   \n 3 YES             Beyer     Donald     <NA>        D     VA   \n 4 YES             Boyle     Brendan    <NA>        D     PA   \n 5 YES             Brown     Anthony    <NA>        D     MD   \n 6 YES             Cardenas  Tony       <NA>        D     CA   \n 7 YES             Clarke    Yvette     D.          D     NY   \n 8 YES             Clay      William    Lacy        D     MO   \n 9 YES             Cohen     Steve      <NA>        D     TN   \n10 YES             Cummings  Elijah     E.          D     MD   \n# … with 45 more rows, and 26 more variables: district <chr>,\n#   date_exact <date>, date_approx_month <date>, date_comb <date>,\n#   date_month <dbl>, date_year <dbl>, margin_flag_2018 <chr>,\n#   flip_2018 <chr>, house_dist <chr>, keyrace_rating <chr>,\n#   median_income <dbl>, median_income_compared_to_national <chr>,\n#   median_age <dbl>, median_age_compared_to_national <chr>,\n#   pct_nonwhite <dbl>, pct_nonwhite_compared_to_national <chr>,\n#   pct_bachelors <dbl>, pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 5) Sort the entire dataframe based on the percentage of a district that has a \n# bachelor's degree or higher (\"pct_bachelors\"), from lowest to highest\n\n\nimpeach %>% \n  arrange (pct_bachelors)\n\n\n# A tibble: 235 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 YES             Cox       TJ         <NA>        D     CA   \n 2 YES             Roybal-A… Lucille    <NA>        D     CA   \n 3 YES             Garcia    Sylvia     <NA>        D     TX   \n 4 YES             Veasey    Marc       <NA>        D     TX   \n 5 YES             Costa     Jim        <NA>        D     CA   \n 6 YES             Barragan  Nanette    <NA>        D     CA   \n 7 YES             Serrano   Jose       E.          D     NY   \n 8 YES             Vargas    Juan       <NA>        D     CA   \n 9 YES             Gallego   Ruben      <NA>        D     AZ   \n10 YES             Tlaib     Rashida    <NA>        D     MI   \n# … with 225 more rows, and 26 more variables: district <chr>,\n#   date_exact <date>, date_approx_month <date>, date_comb <date>,\n#   date_month <dbl>, date_year <dbl>, margin_flag_2018 <chr>,\n#   flip_2018 <chr>, house_dist <chr>, keyrace_rating <chr>,\n#   median_income <dbl>, median_income_compared_to_national <chr>,\n#   median_age <dbl>, median_age_compared_to_national <chr>,\n#   pct_nonwhite <dbl>, pct_nonwhite_compared_to_national <chr>,\n#   pct_bachelors <dbl>, pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 6) Sort the just those who are NO on impeachment based on the percentage of a district that has a \n# bachelor's degree or higher (\"pct_bachelors\"), from lowest to highest\n\nimpeach %>% \n  filter(for_impeachment == 'NO') %>% \n  arrange(pct_bachelors)\n\n\n# A tibble: 26 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 NO              Cuellar   Henry      <NA>        D     TX   \n 2 NO              Bustos    Cheri      <NA>        D     IL   \n 3 NO              Wilson    Frederica  <NA>        D     FL   \n 4 NO              Gonzalez  Vicente    <NA>        D     TX   \n 5 NO              Sewell    Terri      <NA>        D     AL   \n 6 NO              Lawson    Al         <NA>        D     FL   \n 7 NO              Johnson   Eddie      Bernice     D     TX   \n 8 NO              Horsford  Steven     <NA>        D     NV   \n 9 NO              Torres S… Xochitl    <NA>        D     NM   \n10 NO              Peterson  Collin     C.          D     MN   \n# … with 16 more rows, and 26 more variables: district <chr>,\n#   date_exact <date>, date_approx_month <date>, date_comb <date>,\n#   date_month <dbl>, date_year <dbl>, margin_flag_2018 <chr>,\n#   flip_2018 <chr>, house_dist <chr>, keyrace_rating <chr>,\n#   median_income <dbl>, median_income_compared_to_national <chr>,\n#   median_age <dbl>, median_age_compared_to_national <chr>,\n#   pct_nonwhite <dbl>, pct_nonwhite_compared_to_national <chr>,\n#   pct_bachelors <dbl>, pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 7) Sort the just those who are NO on impeachment based on the percentage of a district that has a \n# bachelor's degree or higher (\"pct_bachelors\"), from lowest to highest.\n# Then filter those records by only those whose bachelor's percentage is below the national average (found\n# in the \"pct_bachelors_compared_to_national\" column).\n\nno_impeach <- impeach %>% \n  filter(for_impeachment == 'NO') %>% \n  arrange(pct_bachelors)\n\nno_impeach %>% \n  filter(pct_bachelors_compared_to_national == 'BELOW')\n\n\n# A tibble: 19 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 NO              Cuellar   Henry      <NA>        D     TX   \n 2 NO              Bustos    Cheri      <NA>        D     IL   \n 3 NO              Wilson    Frederica  <NA>        D     FL   \n 4 NO              Gonzalez  Vicente    <NA>        D     TX   \n 5 NO              Sewell    Terri      <NA>        D     AL   \n 6 NO              Lawson    Al         <NA>        D     FL   \n 7 NO              Johnson   Eddie      Bernice     D     TX   \n 8 NO              Horsford  Steven     <NA>        D     NV   \n 9 NO              Torres S… Xochitl    <NA>        D     NM   \n10 NO              Peterson  Collin     C.          D     MN   \n11 NO              Golden    Jared      <NA>        D     ME   \n12 NO              O'Haller… Tom        <NA>        D     AZ   \n13 NO              Brindisi  Anthony    <NA>        D     NY   \n14 NO              Kind      Ron        <NA>        D     WI   \n15 NO              Van Drew  Jefferson  <NA>        D     NJ   \n16 NO              Gabbard   Tulsi      <NA>        D     HI   \n17 NO              McAdams   Ben        <NA>        D     UT   \n18 NO              Schrader  Kurt       <NA>        D     OR   \n19 NO              Horn      Kendra     <NA>        D     OK   \n# … with 26 more variables: district <chr>, date_exact <date>,\n#   date_approx_month <date>, date_comb <date>, date_month <dbl>,\n#   date_year <dbl>, margin_flag_2018 <chr>, flip_2018 <chr>,\n#   house_dist <chr>, keyrace_rating <chr>, median_income <dbl>,\n#   median_income_compared_to_national <chr>, median_age <dbl>,\n#   median_age_compared_to_national <chr>, pct_nonwhite <dbl>,\n#   pct_nonwhite_compared_to_national <chr>, pct_bachelors <dbl>,\n#   pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 8) Filter for only members from New Jersey who are NO on impeachment\n\n\nimpeach %>% \n  filter(for_impeachment == 'NO', state == 'NJ')\n\n\n# A tibble: 1 x 32\n  for_impeachment last_name first_name middle_name party state\n  <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n1 NO              Van Drew  Jefferson  <NA>        D     NJ   \n# … with 26 more variables: district <chr>, date_exact <date>,\n#   date_approx_month <date>, date_comb <date>, date_month <dbl>,\n#   date_year <dbl>, margin_flag_2018 <chr>, flip_2018 <chr>,\n#   house_dist <chr>, keyrace_rating <chr>, median_income <dbl>,\n#   median_income_compared_to_national <chr>, median_age <dbl>,\n#   median_age_compared_to_national <chr>, pct_nonwhite <dbl>,\n#   pct_nonwhite_compared_to_national <chr>, pct_bachelors <dbl>,\n#   pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 9) Filter for those who were YES on impeachment, with a declared date prior to 2019. So only\n# those with dates before 2019.  Then sort those so that the highest Clinton vote percentages are \n# at the top.   \n\nimpeach %>% \n  filter (date_year < '2019', for_impeachment == 'YES') %>% \n  arrange (desc(clinton_percent))\n\n\n# A tibble: 10 x 32\n   for_impeachment last_name first_name middle_name party state\n   <chr>           <chr>     <chr>      <chr>       <chr> <chr>\n 1 YES             Evans     Dwight     <NA>        D     PA   \n 2 YES             Gomez     Jimmy      <NA>        D     CA   \n 3 YES             Clarke    Yvette     D.          D     NY   \n 4 YES             Fudge     Marcia     L.          D     OH   \n 5 YES             Green     Al         <NA>        D     TX   \n 6 YES             Cohen     Steve      <NA>        D     TN   \n 7 YES             Moore     Gwen       <NA>        D     WI   \n 8 YES             Omar      Ilhan      <NA>        D     MN   \n 9 YES             Sherman   Brad       <NA>        D     CA   \n10 YES             Huffman   Jared      <NA>        D     CA   \n# … with 26 more variables: district <chr>, date_exact <date>,\n#   date_approx_month <date>, date_comb <date>, date_month <dbl>,\n#   date_year <dbl>, margin_flag_2018 <chr>, flip_2018 <chr>,\n#   house_dist <chr>, keyrace_rating <chr>, median_income <dbl>,\n#   median_income_compared_to_national <chr>, median_age <dbl>,\n#   median_age_compared_to_national <chr>, pct_nonwhite <dbl>,\n#   pct_nonwhite_compared_to_national <chr>, pct_bachelors <dbl>,\n#   pct_bachelors_compared_to_national <chr>,\n#   rural_pop_above20pct <chr>, gdp_above_national <chr>,\n#   clinton_percent <dbl>, trump_percent <dbl>, obama_percent <dbl>,\n#   romney_percent <dbl>, p16winningparty <chr>,\n#   p12winningparty <chr>\n\n\n\n# 10) Answer this question using grouping.\n# How many members in the dataset who are holdouts on impeachment\n# come from districts with a GDP that is above the national figure? How many below?\n\nimpeach %>% \n  filter (for_impeachment == 'NO') %>% \n  count(gdp_above_national)\n\n\n# A tibble: 2 x 2\n  gdp_above_national     n\n* <chr>              <int>\n1 ABOVE                  7\n2 BELOW                 19\n\n\n\n# 11) Answer this question using grouping.\n# Similar to #10 above, now break down both those who favor impeachment AND who don't\n# and show which come from district above or below national GDP\n\n\nimpeach %>% \n  count (for_impeachment, gdp_above_national)\n\n\n# A tibble: 4 x 3\n  for_impeachment gdp_above_national     n\n  <chr>           <chr>              <int>\n1 NO              ABOVE                  7\n2 NO              BELOW                 19\n3 YES             ABOVE                126\n4 YES             BELOW                 83\n\n\n\n# 12) Answer this question using grouping.\n# Now do the same as #11, but this time instead of GDP look at above/below \n# the national avg percent of college graduates (pct of pop with bachelor's degrees)\n\n\nimpeach %>% \n  count (for_impeachment, pct_bachelors_compared_to_national)\n\n\n# A tibble: 4 x 3\n  for_impeachment pct_bachelors_compared_to_national     n\n  <chr>           <chr>                              <int>\n1 NO              ABOVE                                  7\n2 NO              BELOW                                 19\n3 YES             ABOVE                                128\n4 YES             BELOW                                 81\n\n\n\n# 13) Answer this question using grouping.\n# Instead of showing the above/below national average counts for those for or \n# against impeachment, this time show the combined MEAN/AVERAGE percentage of college\n# grads for all districts that are Yes for impeachment vs. No\n\nimpeach %>% \n  group_by(for_impeachment) %>% \n  summarize(mean(pct_bachelors)) \n\n\n# A tibble: 2 x 2\n  for_impeachment `mean(pct_bachelors)`\n* <chr>                           <dbl>\n1 NO                               27.7\n2 YES                              33.7\n\n\n\n# 14) Answer this question using grouping.\n# Do the same as #13, but this time show the combined MEAN/AVERAGE percentage of \n# the vote that Donald Trump received for all districts that are Yes for \n# impeachment vs. No\n\n\nimpeach %>% \n  group_by(for_impeachment) %>% \n  summarize(mean(trump_percent)) \n\n\n# A tibble: 2 x 2\n  for_impeachment `mean(trump_percent)`\n* <chr>                           <dbl>\n1 NO                               43.8\n2 YES                              32.0\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-20T19:28:15-04:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the site all about me - Jayde Lyon!",
    "description": "Welcome to my new blog, all about me! Please stay tuned to find out how I'm doing in life, what job I'm at, and just all the fun I'm having post-grad! See you soon!",
    "author": [
      {
        "name": "Jayde Lyon",
        "url": "https://jaydelyon.netlify.app/"
      }
    ],
    "date": "2021-04-19",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-20T16:58:04-04:00",
    "input_file": {}
  }
]
